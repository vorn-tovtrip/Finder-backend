// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportType {
  LOST
  FOUND
}

enum ReportStatus {
  PENDING
  CHATOWNER
  COMPLETED
}

enum LoginMethod {
  google
  facebook
  email
}

model Notification {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique()
  phone            String?
  password         String?
  reports          Report[]       @relation("UserReports")
  claims           Claim[]        @relation("UserClaims")
  userBadges       UserBadge[]
  createdAt        DateTime       @default(now())
  DeviceToken      DeviceToken[]
  platform         LoginMethod?
  images           Image[]
  notifications    Notification[]
  totalScore       Int            @default(0)
  messagesSent     Message[]      @relation("SentMessages")
  messagesReceived Message[]      @relation("ReceivedMessages")
  Message          Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   Int
  receiverId Int

  sender   User  @relation("SentMessages", fields: [senderId], references: [id])
  receiver User  @relation("ReceivedMessages", fields: [receiverId], references: [id])
  User     User? @relation(fields: [userId], references: [id])
  userId   Int?
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  name      String?
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  reportId Int?
  report   Report? @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ReportCategory {
  id      Int      @id @default(autoincrement())
  name    String
  reports Report[]
}

model Report {
  id            Int             @id @default(autoincrement())
  type          ReportType
  title         String
  description   String
  location      String?
  province      String?
  contactnumber String?
  district      String?
  status        ReportStatus    @default(PENDING)
  user          User            @relation("UserReports", fields: [userId], references: [id])
  userId        Int
  claims        Claim[]
  histories     StatusHistory[]
  rewardBadge   Badge?          @relation(fields: [rewardBadgeId], references: [id])
  rewardBadgeId Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userBadge     UserBadge[]
  timeLostAt    DateTime        @default(now())
  category      ReportCategory? @relation(fields: [categoryId], references: [id])
  categoryId    Int?

  images Image[]
}

model Claim {
  id        Int      @id @default(autoincrement())
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  Int
  claimer   User     @relation("UserClaims", fields: [claimerId], references: [id])
  claimerId Int
  message   String?
  status    String   @default("pending") // approved | rejected
  createdAt DateTime @default(now())
}

model StatusHistory {
  id        Int           @id @default(autoincrement())
  report    Report        @relation(fields: [reportId], references: [id])
  reportId  Int
  oldStatus ReportStatus?
  newStatus ReportStatus
  note      String?
  createdAt DateTime      @default(now())
}

model Badge {
  id            Int         @id @default(autoincrement())
  name          String      @unique // e.g. "Helper", "Champion", "Cool"
  description   String?
  iconUrl       String?
  userBadges    UserBadge[]
  createdAt     DateTime    @default(now())
  Report        Report[]
  requiredScore Int         @default(0) // minimum score needed to earn this badge
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   Int
  report    Report?  @relation(fields: [reportId], references: [id])
  reportId  Int?
  createdAt DateTime @default(now())
}

model DeviceToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  platform  String? // "ios", "android", "web"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
